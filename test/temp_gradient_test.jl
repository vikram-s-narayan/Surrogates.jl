using Surrogates
using Zygote

function vector_of_tuples_to_matrix(v)
    #convert training data generated by surrogate sampling into a matrix suitable for GEKPLS
    num_rows = length(v)
    num_cols = length(first(v))
    K = zeros(num_rows, num_cols)
    for row in 1:num_rows
        for col in 1:num_cols
            K[row, col] = v[row][col]
        end
    end
    return K
end

function vector_of_tuples_to_matrix2(v)
    #convert gradients into matrix form
    num_rows = length(v)
    num_cols = length(first(first(v)))
    K = zeros(num_rows, num_cols)
    for row in 1:num_rows
        for col in 1:num_cols
            K[row, col] = v[row][1][col]
        end
    end
    return K
end


function sphere_function(x)
    return sum(x .^ 2)
end

n = 50
d = 2
lb = [-10.0, -10.0]
ub = [10.0, 10.0]
x = sample(n, lb, ub, SobolSample())
X = vector_of_tuples_to_matrix(x)
grads = vector_of_tuples_to_matrix2(gradient.(sphere_function, x))
y = reshape(sphere_function.(x), (size(x, 1), 1))
xlimits = hcat(lb, ub)
n_test = 2
x_test = sample(n_test, lb, ub, GoldenSample())
X_test = vector_of_tuples_to_matrix(x_test)
y_true = sphere_function.(x_test)


n_comp = 2
delta_x = 0.0001
extra_points = 2
initial_theta = [0.01 for i in 1:n_comp]
g = GEKPLS(X, y, grads, n_comp, delta_x, xlimits, extra_points, initial_theta)
y_pred = g(X_test)
ss = [[2.0 3.0], [3.0 4.0]]
ss2 = [(2.0, 3.0), (4.0, 5.0)]
#gradient.(g, X_test)
typeof(ss)
typeof([X_test])
X_test
ss

typeof(x_test)
x_test
super_x = [[x[1] x[2]] for x in x_test]
gradient.(g, super_x)

typeof(ss)
typeof(super_x)

krig = Kriging(x, sphere_function.(x), lb, ub)
gradient.(krig, x_test)

gradient.(g, super_x)
x_test

hh = g.(super_x)
ii = g(X_test)

minus = hh - ii

